import os
from contextlib import contextmanager
from typing import List


def func_type():
    pass

class Exporter:
    def __init__(self, packets: List[dict], output_folder: str, generator):
        self.packets = packets
        self.output_folder = output_folder

        # Try not to use this variable unless it is necessary.
        self.generator = generator

    @contextmanager
    def yield_file(self, filename: str):
        with open(os.path.join(self.output_folder, filename), "w") as f:
            yield f

    @property
    def autogen_comment(self) -> str:
        if hasattr(self, "_autogen_comment"):
            if isinstance(self._autogen_comment, type(func_type)):
                return self._autogen_comment()
            else:
                return str(self._autogen_comment)
        
        return (
            "This file was automatically generated by eng-software-packet-definitions. "
            "All changes you intend to make to this file should be made into that project instead."
        )

    def export(self):
        raise NotImplementedError()
